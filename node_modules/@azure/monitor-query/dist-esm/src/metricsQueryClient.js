import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { tracingClient } from "./tracing";
import { MonitorManagementClient as GeneratedMetricsClient, KnownApiVersion201801 as MetricsApiVersion, } from "./generated/metrics/src";
import { MonitorManagementClient as GeneratedMetricsDefinitionsClient, KnownApiVersion201801 as MetricDefinitionsApiVersion, } from "./generated/metricsdefinitions/src";
import { MonitorManagementClient as GeneratedMetricsNamespacesClient, KnownApiVersion20171201Preview as MetricNamespacesApiVersion, } from "./generated/metricsnamespaces/src";
import { convertRequestForMetrics, convertRequestOptionsForMetricsDefinitions, convertResponseForMetricNamespaces, convertResponseForMetrics, convertResponseForMetricsDefinitions, } from "./internal/modelConverters";
import { SDK_VERSION } from "./constants";
const defaultMetricsScope = "https://management.azure.com/.default";
/**
 * A client that can query metrics, get metric definitions and get metric namespaces.
 */
export class MetricsQueryClient {
    /**
     * Creates a MetricsQueryClient.
     * @param tokenCredential - A TokenCredential that has rights to query metrics on resources.
     * @param options - Options for the client like controlling request retries.
     */
    constructor(tokenCredential, options) {
        var _a;
        let scope;
        if (options === null || options === void 0 ? void 0 : options.endpoint) {
            scope = `${options === null || options === void 0 ? void 0 : options.endpoint}/.default`;
        }
        const credentialOptions = {
            credentialScopes: scope,
        };
        const packageDetails = `azsdk-js-monitor-query/${SDK_VERSION}`;
        const userAgentPrefix = (options === null || options === void 0 ? void 0 : options.userAgentOptions) && (options === null || options === void 0 ? void 0 : options.userAgentOptions.userAgentPrefix)
            ? `${options === null || options === void 0 ? void 0 : options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const serviceClientOptions = Object.assign(Object.assign({}, options), { $host: options === null || options === void 0 ? void 0 : options.endpoint, endpoint: options === null || options === void 0 ? void 0 : options.endpoint, credentialScopes: (_a = credentialOptions === null || credentialOptions === void 0 ? void 0 : credentialOptions.credentialScopes) !== null && _a !== void 0 ? _a : defaultMetricsScope, credential: tokenCredential, userAgentOptions: {
                userAgentPrefix,
            } });
        this._metricsClient = new GeneratedMetricsClient(MetricsApiVersion.TwoThousandEighteen0101, serviceClientOptions);
        this._definitionsClient = new GeneratedMetricsDefinitionsClient(MetricDefinitionsApiVersion.TwoThousandEighteen0101, serviceClientOptions);
        this._namespacesClient = new GeneratedMetricsNamespacesClient(MetricNamespacesApiVersion.TwoThousandSeventeen1201Preview, serviceClientOptions);
    }
    /**
     * Query metrics, given a resource URI
     * @param resourceUri - The resource URI to query.
     * @param metricNames - The names of the metrics to retrieve.
     * @param options - Options for querying metrics.
     * @returns A response containing metrics.
     */
    async queryResource(resourceUri, metricNames, options = {} // eslint-disable-line @azure/azure-sdk/ts-naming-options
    ) {
        return tracingClient.withSpan("MetricsQueryClient.queryResource", options, async (updatedOptions) => {
            const response = await this._metricsClient.metrics.list(resourceUri, convertRequestForMetrics(metricNames, updatedOptions));
            return convertResponseForMetrics(response);
        });
    }
    /**
     * List alert segments for Metric Definitions
     */
    listSegmentOfMetricDefinitions(resourceUri, options = {}) {
        return __asyncGenerator(this, arguments, function* listSegmentOfMetricDefinitions_1() {
            const segmentResponse = yield __await(tracingClient.withSpan("MetricsQueryClient.listSegmentOfMetricDefinitions", options, async (updatedOptions) => this._definitionsClient.metricDefinitions.list(resourceUri, convertRequestOptionsForMetricsDefinitions(updatedOptions))));
            yield yield __await(convertResponseForMetricsDefinitions(segmentResponse.value));
        });
    }
    /**
     * List items for Metric Definitions
     */
    listItemsOfMetricDefinitions(resourceUri, options) {
        return __asyncGenerator(this, arguments, function* listItemsOfMetricDefinitions_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listSegmentOfMetricDefinitions(resourceUri, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const segment = _c;
                        if (segment) {
                            yield __await(yield* __asyncDelegator(__asyncValues(segment)));
                        }
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     *   /**
     *
     * Returns an async iterable iterator to list metric definitions.
     *
     * Example using `for await` syntax:
     *
     * ```js
     * const metricsQueryClient = new MetricsQueryClient(tokenCredential);
     * const metricDefinitions = client.listMetricDefinitions(resourceUri, options);
     * let i = 1;
     * for await (const metricDefinition of metricDefinitions) {
     *   console.log(`metricDefinition ${i++}:`);
     *   console.log(metricDefinition);
     * }
     * ```
     *
     * Example using `iter.next()`:
     *
     * ```js
     * let iter = client.listMetricDefinitions(resourceUri, options);
     * let result = await iter.next();
     * while (!result.done) {
     *   console.log(` metricDefinitions - ${result.value.id}, ${result.value.name}`);
     *   result = await iter.next();
     * }
     * ```
     *
     * Get a list of metric definitions, given a resource URI.
     * @param resourceUri - The resource URI to get metric definitions for.
     * @param options - Options for getting metric definitions.
     * @returns Metric definitions for a given resource URI.
     */
    listMetricDefinitions(resourceUri, options) {
        const iter = this.listItemsOfMetricDefinitions(resourceUri, options);
        return {
            /**
             * The next method, part of the iteration protocol
             */
            next() {
                return iter.next();
            },
            /**
             * The connection to the async iterator, part of the iteration protocol
             */
            [Symbol.asyncIterator]() {
                return this;
            },
            /**
             * @returns an AsyncIterableIterator that works a page at a time
             */
            byPage: () => {
                return this.listSegmentOfMetricDefinitions(resourceUri, options);
            },
        };
    }
    /**
     * List alert segments for Metric Namespaces
     */
    listSegmentOfMetricNamespaces(resourceUri, options = {}) {
        return __asyncGenerator(this, arguments, function* listSegmentOfMetricNamespaces_1() {
            const segmentResponse = yield __await(tracingClient.withSpan("MetricsQueryClient.listSegmentOfMetricNamespaces", options, async (updatedOptions) => this._namespacesClient.metricNamespaces.list(resourceUri, updatedOptions)));
            yield yield __await(convertResponseForMetricNamespaces(segmentResponse.value));
        });
    }
    /**
     * List items for Metric Namespaces
     */
    listItemsOfMetricNamespaces(resourceUri, options) {
        return __asyncGenerator(this, arguments, function* listItemsOfMetricNamespaces_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listSegmentOfMetricNamespaces(resourceUri, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const segment = _c;
                        if (segment) {
                            yield __await(yield* __asyncDelegator(__asyncValues(segment)));
                        }
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     *
     * Returns an async iterable iterator to list metric namespaces.
     *
     * Example using `for await` syntax:
     *
     * ```js
     * const metricsQueryClient = new MetricsQueryClient(tokenCredential);
     * const metricNamespaces = client.listMetricNamespaces(resourceUri, options);
     * let i = 1;
     * for await (const metricNamespace of metricNamespaces) {
     *   console.log(`metricNamespace ${i++}:`);
     *   console.log(metricNamespace);
     * }
     * ```
     *
     * Example using `iter.next()`:
     *
     * ```js
     * let iter = client.listMetricNamespaces(resourceUri, options);
     * let result = await iter.next();
     * while (!result.done) {
     *   console.log(` metricNamespace - ${result.value.id}, ${result.value.name}`);
     *   result = await iter.next();
     * }
     * ```
     * Get a list of metric namespaces, given a resource URI.
     * @param resourceUri - The resource URI to get metric namespaces for.
     * @param options - Options for getting metric namespaces.
     * @returns Metric namespaces for a given resource URI.
     */
    listMetricNamespaces(resourceUri, options) {
        const iter = this.listItemsOfMetricNamespaces(resourceUri, options);
        return {
            /**
             * The next method, part of the iteration protocol
             */
            next() {
                return iter.next();
            },
            /**
             * The connection to the async iterator, part of the iteration protocol
             */
            [Symbol.asyncIterator]() {
                return this;
            },
            /**
             * @returns an AsyncIterableIterator that works a page at a time
             */
            byPage: () => {
                return this.listSegmentOfMetricNamespaces(resourceUri, options);
            },
        };
    }
}
//# sourceMappingURL=metricsQueryClient.js.map
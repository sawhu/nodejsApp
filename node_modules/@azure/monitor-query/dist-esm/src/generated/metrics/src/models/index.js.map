{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../src/generated/metrics/src/models/index.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAwFH,yEAAyE;AACzE,MAAM,CAAN,IAAY,qBAGX;AAHD,WAAY,qBAAqB;IAC/B,+BAA+B;IAC/B,+DAAsC,CAAA;AACxC,CAAC,EAHW,qBAAqB,KAArB,qBAAqB,QAGhC;AAWD,mEAAmE;AACnE,MAAM,CAAN,IAAY,eAcX;AAdD,WAAY,eAAe;IACzB,kCAAe,CAAA;IACf,kCAAe,CAAA;IACf,sCAAmB,CAAA;IACnB,oDAAiC,CAAA;IACjC,oDAAiC,CAAA;IACjC,sCAAmB,CAAA;IACnB,gDAA6B,CAAA;IAC7B,8CAA2B,CAAA;IAC3B,8CAA2B,CAAA;IAC3B,kCAAe,CAAA;IACf,4CAAyB,CAAA;IACzB,0CAAuB,CAAA;IACvB,kDAA+B,CAAA;AACjC,CAAC,EAdW,eAAe,KAAf,eAAe,QAc1B","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\n\n/** The response to a metrics query. */\nexport interface Response {\n  /** The integer value representing the relative cost of the query. */\n  cost?: number;\n  /** The timespan for which the data was retrieved. Its value consists of two datetimes concatenated, separated by '/'.  This may be adjusted in the future and returned back from what was originally requested. */\n  timespan: string;\n  /** The interval (window size) for which the metric data was returned in.  This may be adjusted in the future and returned back from what was originally requested.  This is not present if a metadata request was made. */\n  interval?: string;\n  /** The namespace of the metrics being queried */\n  namespace?: string;\n  /** The region of the resource being queried for metrics. */\n  resourceregion?: string;\n  /** the value of the collection. */\n  value: Metric[];\n}\n\n/** The result data of a query. */\nexport interface Metric {\n  /** the metric Id. */\n  id: string;\n  /** the resource type of the metric resource. */\n  type: string;\n  /** the name and the display name of the metric, i.e. it is localizable string. */\n  name: LocalizableString;\n  /** Detailed description of this metric. */\n  displayDescription?: string;\n  /** 'Success' or the error details on query failures for this metric. */\n  errorCode?: string;\n  /** Error message encountered querying this specific metric. */\n  errorMessage?: string;\n  /** The unit of the metric. */\n  unit: MetricUnit;\n  /** the time series returned when a data query is performed. */\n  timeseries: TimeSeriesElement[];\n}\n\n/** The localizable string class. */\nexport interface LocalizableString {\n  /** the invariant value. */\n  value: string;\n  /** the locale specific value. */\n  localizedValue?: string;\n}\n\n/** A time series result type. The discriminator value is always TimeSeries in this case. */\nexport interface TimeSeriesElement {\n  /** the metadata values returned if $filter was specified in the call. */\n  metadatavalues?: MetadataValue[];\n  /** An array of data points representing the metric values.  This is only returned if a result type of data is specified. */\n  data?: MetricValue[];\n}\n\n/** Represents a metric metadata value. */\nexport interface MetadataValue {\n  /** the name of the metadata. */\n  name?: LocalizableString;\n  /** the value of the metadata. */\n  value?: string;\n}\n\n/** Represents a metric value. */\nexport interface MetricValue {\n  /** the timestamp for the metric value in ISO 8601 format. */\n  timeStamp: Date;\n  /** the average value in the time range. */\n  average?: number;\n  /** the least value in the time range. */\n  minimum?: number;\n  /** the greatest value in the time range. */\n  maximum?: number;\n  /** the sum of all of the values in the time range. */\n  total?: number;\n  /** the number of samples in the time range. Can be used to determine the number of values that contributed to the average value. */\n  count?: number;\n}\n\n/** Describes the format of Error response. */\nexport interface ErrorResponse {\n  /** Error code */\n  code?: string;\n  /** Error message indicating why the operation failed. */\n  message?: string;\n}\n\n/** Known values of {@link ApiVersion201801} that the service accepts. */\nexport enum KnownApiVersion201801 {\n  /** Api Version '2018-01-01' */\n  TwoThousandEighteen0101 = \"2018-01-01\"\n}\n\n/**\n * Defines values for ApiVersion201801. \\\n * {@link KnownApiVersion201801} can be used interchangeably with ApiVersion201801,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **2018-01-01**: Api Version '2018-01-01'\n */\nexport type ApiVersion201801 = string;\n\n/** Known values of {@link MetricUnit} that the service accepts. */\nexport enum KnownMetricUnit {\n  Count = \"Count\",\n  Bytes = \"Bytes\",\n  Seconds = \"Seconds\",\n  CountPerSecond = \"CountPerSecond\",\n  BytesPerSecond = \"BytesPerSecond\",\n  Percent = \"Percent\",\n  MilliSeconds = \"MilliSeconds\",\n  ByteSeconds = \"ByteSeconds\",\n  Unspecified = \"Unspecified\",\n  Cores = \"Cores\",\n  MilliCores = \"MilliCores\",\n  NanoCores = \"NanoCores\",\n  BitsPerSecond = \"BitsPerSecond\"\n}\n\n/**\n * Defines values for MetricUnit. \\\n * {@link KnownMetricUnit} can be used interchangeably with MetricUnit,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Count** \\\n * **Bytes** \\\n * **Seconds** \\\n * **CountPerSecond** \\\n * **BytesPerSecond** \\\n * **Percent** \\\n * **MilliSeconds** \\\n * **ByteSeconds** \\\n * **Unspecified** \\\n * **Cores** \\\n * **MilliCores** \\\n * **NanoCores** \\\n * **BitsPerSecond**\n */\nexport type MetricUnit = string;\n/** Defines values for ResultType. */\nexport type ResultType = \"Data\" | \"Metadata\";\n\n/** Optional parameters. */\nexport interface MetricsListOptionalParams extends coreClient.OperationOptions {\n  /** The timespan of the query. It is a string with the following format 'startDateTime_ISO/endDateTime_ISO'. */\n  timespan?: string;\n  /** The interval (i.e. timegrain) of the query. */\n  interval?: string;\n  /** The names of the metrics (comma separated) to retrieve. Special case: If a metricname itself has a comma in it then use %2 to indicate it. Eg: 'Metric,Name1' should be **'Metric%2Name1'** */\n  metricnames?: string;\n  /** The list of aggregation types (comma separated) to retrieve. */\n  aggregation?: string;\n  /**\n   * The maximum number of records to retrieve.\n   * Valid only if $filter is specified.\n   * Defaults to 10.\n   */\n  top?: number;\n  /**\n   * The aggregation to use for sorting results and the direction of the sort.\n   * Only one order can be specified.\n   * Examples: sum asc.\n   */\n  orderby?: string;\n  /** The **$filter** is used to reduce the set of metric data returned. Example: Metric contains metadata A, B and C. - Return all time series of C where A = a1 and B = b1 or b2 **$filter=A eq 'a1' and B eq 'b1' or B eq 'b2' and C eq '*'** - Invalid variant: **$filter=A eq 'a1' and B eq 'b1' and C eq '*' or B = 'b2'** This is invalid because the logical or operator cannot separate two different metadata names. - Return all time series where A = a1, B = b1 and C = c1: **$filter=A eq 'a1' and B eq 'b1' and C eq 'c1'** - Return all time series where A = a1 **$filter=A eq 'a1' and B eq '*' and C eq '*'**. Special case: When dimension name or dimension value uses round brackets. Eg: When dimension name is **dim (test) 1** Instead of using $filter= \"dim (test) 1 eq '*' \" use **$filter= \"dim %2528test%2529 1 eq '*' \"** When dimension name is **dim (test) 3** and dimension value is **dim3 (test) val** Instead of using $filter= \"dim (test) 3 eq 'dim3 (test) val' \" use **$filter= \"dim %2528test%2529 3 eq 'dim3 %2528test%2529 val' \"** */\n  filter?: string;\n  /** Reduces the set of data collected. The syntax allowed depends on the operation. See the operation's description for details. */\n  resultType?: ResultType;\n  /** Metric namespace to query metric definitions for. */\n  metricnamespace?: string;\n}\n\n/** Contains response data for the list operation. */\nexport type MetricsListResponse = Response;\n\n/** Optional parameters. */\nexport interface MonitorManagementClientOptionalParams\n  extends coreClient.ServiceClientOptions {\n  /** server parameter */\n  $host?: string;\n  /** Overrides client endpoint. */\n  endpoint?: string;\n}\n"]}
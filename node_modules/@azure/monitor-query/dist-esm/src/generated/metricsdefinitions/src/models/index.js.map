{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../src/generated/metricsdefinitions/src/models/index.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAgEH,yEAAyE;AACzE,MAAM,CAAN,IAAY,qBAGX;AAHD,WAAY,qBAAqB;IAC/B,+BAA+B;IAC/B,+DAAsC,CAAA;AACxC,CAAC,EAHW,qBAAqB,KAArB,qBAAqB,QAGhC;AAWD,oEAAoE;AACpE,MAAM,CAAN,IAAY,gBAMX;AAND,WAAY,gBAAgB;IAC1B,iDAA6B,CAAA;IAC7B,iDAA6B,CAAA;IAC7B,qCAAiB,CAAA;IACjB,uCAAmB,CAAA;IACnB,6CAAyB,CAAA;AAC3B,CAAC,EANW,gBAAgB,KAAhB,gBAAgB,QAM3B;AAeD,mEAAmE;AACnE,MAAM,CAAN,IAAY,eAcX;AAdD,WAAY,eAAe;IACzB,kCAAe,CAAA;IACf,kCAAe,CAAA;IACf,sCAAmB,CAAA;IACnB,oDAAiC,CAAA;IACjC,oDAAiC,CAAA;IACjC,sCAAmB,CAAA;IACnB,gDAA6B,CAAA;IAC7B,8CAA2B,CAAA;IAC3B,8CAA2B,CAAA;IAC3B,kCAAe,CAAA;IACf,4CAAyB,CAAA;IACzB,0CAAuB,CAAA;IACvB,kDAA+B,CAAA;AACjC,CAAC,EAdW,eAAe,KAAf,eAAe,QAc1B","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\n\n/** Represents collection of metric definitions. */\nexport interface MetricDefinitionCollection {\n  /** the values for the metric definitions. */\n  value: MetricDefinition[];\n}\n\n/** Metric definition class specifies the metadata for a metric. */\nexport interface MetricDefinition {\n  /** Flag to indicate whether the dimension is required. */\n  isDimensionRequired?: boolean;\n  /** the resource identifier of the resource that emitted the metric. */\n  resourceId?: string;\n  /** the namespace the metric belongs to. */\n  namespace?: string;\n  /** the name and the display name of the metric, i.e. it is a localizable string. */\n  name?: LocalizableString;\n  /** Detailed description of this metric. */\n  displayDescription?: string;\n  /** Custom category name for this metric. */\n  category?: string;\n  /** The class of the metric. */\n  metricClass?: MetricClass;\n  /** The unit of the metric. */\n  unit?: MetricUnit;\n  /** the primary aggregation type value defining how to use the values for display. */\n  primaryAggregationType?: AggregationType;\n  /** the collection of what aggregation types are supported. */\n  supportedAggregationTypes?: AggregationType[];\n  /** the collection of what aggregation intervals are available to be queried. */\n  metricAvailabilities?: MetricAvailability[];\n  /** the resource identifier of the metric definition. */\n  id?: string;\n  /** the name and the display name of the dimension, i.e. it is a localizable string. */\n  dimensions?: LocalizableString[];\n}\n\n/** The localizable string class. */\nexport interface LocalizableString {\n  /** the invariant value. */\n  value: string;\n  /** the locale specific value. */\n  localizedValue?: string;\n}\n\n/** Metric availability specifies the time grain (aggregation interval or frequency) and the retention period for that time grain. */\nexport interface MetricAvailability {\n  /** the time grain specifies the aggregation interval for the metric. Expressed as a duration 'PT1M', 'P1D', etc. */\n  timeGrain?: string;\n  /** the retention period for the metric at the specified timegrain.  Expressed as a duration 'PT1M', 'P1D', etc. */\n  retention?: string;\n}\n\n/** Describes the format of Error response. */\nexport interface ErrorResponse {\n  /** Error code */\n  code?: string;\n  /** Error message indicating why the operation failed. */\n  message?: string;\n}\n\n/** Known values of {@link ApiVersion201801} that the service accepts. */\nexport enum KnownApiVersion201801 {\n  /** Api Version '2018-01-01' */\n  TwoThousandEighteen0101 = \"2018-01-01\"\n}\n\n/**\n * Defines values for ApiVersion201801. \\\n * {@link KnownApiVersion201801} can be used interchangeably with ApiVersion201801,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **2018-01-01**: Api Version '2018-01-01'\n */\nexport type ApiVersion201801 = string;\n\n/** Known values of {@link MetricClass} that the service accepts. */\nexport enum KnownMetricClass {\n  Availability = \"Availability\",\n  Transactions = \"Transactions\",\n  Errors = \"Errors\",\n  Latency = \"Latency\",\n  Saturation = \"Saturation\"\n}\n\n/**\n * Defines values for MetricClass. \\\n * {@link KnownMetricClass} can be used interchangeably with MetricClass,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Availability** \\\n * **Transactions** \\\n * **Errors** \\\n * **Latency** \\\n * **Saturation**\n */\nexport type MetricClass = string;\n\n/** Known values of {@link MetricUnit} that the service accepts. */\nexport enum KnownMetricUnit {\n  Count = \"Count\",\n  Bytes = \"Bytes\",\n  Seconds = \"Seconds\",\n  CountPerSecond = \"CountPerSecond\",\n  BytesPerSecond = \"BytesPerSecond\",\n  Percent = \"Percent\",\n  MilliSeconds = \"MilliSeconds\",\n  ByteSeconds = \"ByteSeconds\",\n  Unspecified = \"Unspecified\",\n  Cores = \"Cores\",\n  MilliCores = \"MilliCores\",\n  NanoCores = \"NanoCores\",\n  BitsPerSecond = \"BitsPerSecond\"\n}\n\n/**\n * Defines values for MetricUnit. \\\n * {@link KnownMetricUnit} can be used interchangeably with MetricUnit,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Count** \\\n * **Bytes** \\\n * **Seconds** \\\n * **CountPerSecond** \\\n * **BytesPerSecond** \\\n * **Percent** \\\n * **MilliSeconds** \\\n * **ByteSeconds** \\\n * **Unspecified** \\\n * **Cores** \\\n * **MilliCores** \\\n * **NanoCores** \\\n * **BitsPerSecond**\n */\nexport type MetricUnit = string;\n/** Defines values for AggregationType. */\nexport type AggregationType =\n  | \"None\"\n  | \"Average\"\n  | \"Count\"\n  | \"Minimum\"\n  | \"Maximum\"\n  | \"Total\";\n\n/** Optional parameters. */\nexport interface MetricDefinitionsListOptionalParams\n  extends coreClient.OperationOptions {\n  /** Metric namespace to query metric definitions for. */\n  metricnamespace?: string;\n}\n\n/** Contains response data for the list operation. */\nexport type MetricDefinitionsListResponse = MetricDefinitionCollection;\n\n/** Optional parameters. */\nexport interface MonitorManagementClientOptionalParams\n  extends coreClient.ServiceClientOptions {\n  /** server parameter */\n  $host?: string;\n  /** Overrides client endpoint. */\n  endpoint?: string;\n}\n"]}